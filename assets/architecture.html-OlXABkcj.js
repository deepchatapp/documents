import{_ as n,c as o,a as s,e as d,b as e,d as l,r as a,o as c}from"./app-BlcO6xNO.js";const r={},v={class:"architecture-container"},p={id:"整体架构",tabindex:"-1"},h={class:"header-anchor",href:"#整体架构"},u={id:"前端技术栈",tabindex:"-1"},g={class:"header-anchor",href:"#前端技术栈"},m={id:"后端技术栈",tabindex:"-1"},x={class:"header-anchor",href:"#后端技术栈"},b={id:"模型调用流程",tabindex:"-1"},f={class:"header-anchor",href:"#模型调用流程"},C={id:"插件系统",tabindex:"-1"},k={class:"header-anchor",href:"#插件系统"},D={id:"安全性设计",tabindex:"-1"},y={class:"header-anchor",href:"#安全性设计"},S={id:"可扩展性",tabindex:"-1"},N={class:"header-anchor",href:"#可扩展性"};function E(w,t){const i=a("Badge");return c(),o("div",null,[t[18]||(t[18]=s("h1",{id:"deepchat-架构设计",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#deepchat-架构设计"},[s("span",null,"DeepChat 架构设计")])],-1)),s("div",v,[t[7]||(t[7]=s("p",null,"DeepChat采用现代化的软件架构设计，确保系统的稳定性、可扩展性和用户体验。下面介绍DeepChat的整体架构和关键组件。",-1)),s("h2",p,[s("a",h,[s("span",null,[t[0]||(t[0]=e("整体架构 ")),l(i,{text:"系统设计",type:"tip"})])])]),t[8]||(t[8]=d('<div class="architecture-diagram"><img src="https://via.placeholder.com/800x400?text=DeepChat架构图" alt="DeepChat架构图" class="arch-img"></div><p>DeepChat采用客户端-服务器架构设计，主要由以下几个部分组成：</p><div class="arch-component-grid"><div class="arch-component"><div class="comp-title">前端界面</div><div class="comp-desc">基于Electron构建的跨平台桌面应用</div></div><div class="arch-component"><div class="comp-title">后端服务</div><div class="comp-desc">处理用户请求、模型调用和系统管理</div></div><div class="arch-component"><div class="comp-title">模型接口</div><div class="comp-desc">连接各种大语言模型的统一接口</div></div><div class="arch-component"><div class="comp-title">插件系统</div><div class="comp-desc">提供功能扩展能力</div></div><div class="arch-component"><div class="comp-title">存储层</div><div class="comp-desc">管理对话历史、用户设置和知识库数据</div></div></div>',3)),s("h2",u,[s("a",g,[s("span",null,[t[1]||(t[1]=e("前端技术栈 ")),l(i,{text:"技术选型",type:"warning"})])])]),t[9]||(t[9]=d('<p>DeepChat前端采用现代Web技术栈开发：</p><div class="tech-stack"><div class="tech-item"><div class="tech-logo">⚡</div><div class="tech-name">Electron</div><div class="tech-desc">跨平台桌面应用框架</div></div><div class="tech-item"><div class="tech-logo">🖖</div><div class="tech-name">Vue.js</div><div class="tech-desc">响应式前端框架</div></div><div class="tech-item"><div class="tech-logo">🎨</div><div class="tech-name">Tailwind CSS</div><div class="tech-desc">实用优先的CSS框架</div></div><div class="tech-item"><div class="tech-logo">📝</div><div class="tech-name">Monaco Editor</div><div class="tech-desc">代码编辑器组件</div></div><div class="tech-item"><div class="tech-logo">📊</div><div class="tech-name">ECharts</div><div class="tech-desc">数据可视化图表库</div></div></div>',2)),s("h2",m,[s("a",x,[s("span",null,[t[2]||(t[2]=e("后端技术栈 ")),l(i,{text:"服务构建",type:"warning"})])])]),t[10]||(t[10]=d("<p>后端服务采用高性能的技术组件：</p><ul><li><strong>Node.js</strong>：主要运行环境</li><li><strong>Express</strong>：Web服务框架</li><li><strong>WebSocket</strong>：实时通信</li><li><strong>SQLite</strong>：本地数据存储</li><li><strong>文档处理库</strong>：支持多种格式文档的解析</li></ul>",2)),s("h2",b,[s("a",f,[s("span",null,[t[3]||(t[3]=e("模型调用流程 ")),l(i,{text:"核心流程",type:"tip"})])])]),t[11]||(t[11]=d('<div class="process-flow"><div class="process-step"><div class="step-number">1</div><div class="step-desc"><strong>用户输入</strong>：用户在界面输入消息或上传文档 </div></div><div class="process-step"><div class="step-number">2</div><div class="step-desc"><strong>请求处理</strong>：前端将请求发送到后端服务 </div></div><div class="process-step"><div class="step-number">3</div><div class="step-desc"><strong>上下文构建</strong>：系统构建完整的对话上下文 </div></div><div class="process-step"><div class="step-number">4</div><div class="step-desc"><strong>模型调用</strong>：通过统一接口调用选定的大语言模型 </div></div><div class="process-step"><div class="step-number">5</div><div class="step-desc"><strong>响应处理</strong>：处理模型返回的结果 </div></div><div class="process-step"><div class="step-number">6</div><div class="step-desc"><strong>内容渲染</strong>：将结果渲染到用户界面 </div></div></div>',1)),s("h2",C,[s("a",k,[s("span",null,[t[4]||(t[4]=e("插件系统 ")),l(i,{text:"扩展能力",type:"tip"})])])]),t[12]||(t[12]=s("p",null,"DeepChat设计了模块化的插件系统，支持功能扩展：",-1)),t[13]||(t[13]=s("ul",null,[s("li",null,[s("strong",null,"核心API"),e("：提供插件开发的基础API")]),s("li",null,[s("strong",null,"事件机制"),e("：基于发布-订阅模式的事件系统")]),s("li",null,[s("strong",null,"插件市场"),e("：发现和安装社区开发的插件")])],-1)),s("h2",D,[s("a",y,[s("span",null,[t[5]||(t[5]=e("安全性设计 ")),l(i,{text:"安全保障",type:"danger"})])])]),t[14]||(t[14]=s("p",null,"DeepChat高度重视用户数据安全：",-1)),t[15]||(t[15]=s("ul",null,[s("li",null,[s("strong",null,"本地存储"),e("：对话数据默认存储在本地")]),s("li",null,[s("strong",null,"加密传输"),e("：与模型服务的通信采用加密传输")]),s("li",null,[s("strong",null,"权限控制"),e("：严格的API权限控制")]),s("li",null,[s("strong",null,"沙箱机制"),e("：第三方插件在沙箱环境中运行")])],-1)),s("h2",S,[s("a",N,[s("span",null,[t[6]||(t[6]=e("可扩展性 ")),l(i,{text:"未来规划",type:"warning"})])])]),t[16]||(t[16]=s("p",null,"系统设计考虑了未来的扩展需求：",-1)),t[17]||(t[17]=s("ul",null,[s("li",null,[s("strong",null,"多模型支持"),e("：统一的模型接口，便于接入新模型")]),s("li",null,[s("strong",null,"多语言支持"),e("：国际化框架，支持多语言界面")]),s("li",null,[s("strong",null,"主题定制"),e("：可定制的UI主题系统")]),s("li",null,[s("strong",null,"功能模块"),e("：模块化设计，支持功能的灵活组合")])],-1))])])}const V=n(r,[["render",E]]),I=JSON.parse('{"path":"/guide/introduction/architecture.html","title":"DeepChat 架构设计","lang":"zh-CN","frontmatter":{"pageClass":"architecture-page"},"headers":[{"level":2,"title":"整体架构","slug":"整体架构","link":"#整体架构","children":[]},{"level":2,"title":"前端技术栈","slug":"前端技术栈","link":"#前端技术栈","children":[]},{"level":2,"title":"后端技术栈","slug":"后端技术栈","link":"#后端技术栈","children":[]},{"level":2,"title":"模型调用流程","slug":"模型调用流程","link":"#模型调用流程","children":[]},{"level":2,"title":"插件系统","slug":"插件系统","link":"#插件系统","children":[]},{"level":2,"title":"安全性设计","slug":"安全性设计","link":"#安全性设计","children":[]},{"level":2,"title":"可扩展性","slug":"可扩展性","link":"#可扩展性","children":[]}],"git":{"createdTime":1742744331000,"updatedTime":1742744926000,"contributors":[{"name":"袁鑫","email":"eric.yuanxin@gmail.com","commits":2}]},"filePathRelative":"guide/introduction/architecture.md"}');export{V as comp,I as data};
